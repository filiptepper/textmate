#!/usr/bin/env ruby

require "fileutils"
require "rubygems"
require "thor"
require "open-uri"
require "yaml"
require "cgi"

class TextmateInstaller < Thor

  # CHANGED: renamed list to remote. Could there be a better name?
  desc "search [SEARCH]", "Lists all the matching remote bundles"
  def search(search_term = "")
    search_term = Regexp.new(".*#{search_term}.*", "i")

    REMOTE_LOCATIONS.each do |name,location|
      puts "\n" << name.to_s << " Remote Bundles\n" << name.to_s.gsub(/./,'-') << '---------------'

      results = case location[:scm]
                when :svn
                  %W[svn list #{e_sh location[:url]}].map {|x| x.split(".")[0]}.select {|x| x =~ search_term}.join("\n")
                when :git
                  'git remotes not implemented yet'
                when :github
                  find_github_bundles(search_term).map {|result|
                    "%s (by %s)" %
                    [
                      normalize_github_repo_name(result['name']).split('.').first,
                      result['username']
                    ]
                  }
                end

      puts results
    end
  end

  desc "list [SEARCH]", "lists all the bundles installed locally"
  def list(search_term = "")
    search_term = Regexp.new(".*#{search_term}.*", "i")

    local_bundle_paths.each do |name,bundles_path|
      puts "\n" << name.to_s << " Bundles\n" << name.to_s.gsub(/./,'-') << '--------'
      puts Dir["#{e_sh bundles_path}/*.tmbundle"].map {|x| x.split("/").last.split(".").first}.
        select {|x| x =~ search_term}.join("\n")
    end
  end

  desc "install NAME", "Install a bundle. Source must be one of trunk, review, or github. \n" \
                       "If multiple gems with the same name exist, you will be prompted to \n" \
                       "choose from the available list."
  method_option :source
  def install(bundle_name)
    FileUtils.mkdir_p install_bundles_path
    puts "Checking out #{bundle_name}..."

    # CHANGED: It's faster to just try and fail for each repo than to search them all first
    installed=false
    REMOTE_LOCATIONS.each do |remote_name,location|
      next unless remote_bundle(options["source"]) == location if options.key?("source")

      cmd = case location[:scm]
            when :git
              'echo "git remotes not implemented yet"'
            when :svn
              %[svn co "#{location[:url]}/#{url_escape bundle_name}.tmbundle" #{e_sh install_bundles_path}/#{e_sh bundle_name}.tmbundle 2>&1]
            when :github
              repos = find_github_bundles(denormalize_github_repo_name(bundle_name))

              # Handle possible multiple Repos with the same name
              case repos.size
              when 0
                'echo "Sorry, no such bundle found"'
              when 1
                git_clone(repos.first["username"], repos.first["name"])
              else
                puts "Multiple bundles with that name found. Please choose which one you want to install:"
                repos.each_with_index {|repo, idx|
                  puts "%d: %s by %s" %
                  [
                    idx + 1,
                    normalize_github_repo_name(repo['name']),
                    repo['username']
                  ]
                }
                print "Your choice: "

                # Since to_i defaults to 0, we have to use Integer
                choice = Integer(STDIN.gets.chomp) rescue nil
                until choice && (0...repos.size).include?( choice - 1 ) do
                  print "Sorry, invalid choice. Please enter a valid number or Ctrl+C to stop: "
                  choice = Integer(STDIN.gets.chomp) rescue nil
                end

                git_clone(repos[choice - 1]["username"], repos[choice - 1]["name"])
              end
            end

      res = %x{#{cmd}}

      puts cmd, res.gsub(/^/,'    ')

      installed=true and break if res =~ /Checked out revision|Initialized empty Git repository/
    end
    abort 'Not Installed' unless installed

    reload :verbose => true
  end

  desc "uninstall NAME", "uninstall a bundle"
  def uninstall(bundle_name)
    removed = false

    puts "Removing bundle..."
    # When moving to the trash, maybe move the bundle into a trash/disabled_bundles subfolder
    #   named as the bundles_path key. Just in case there are multiple versions of
    #     the same bundle in multiple bundle paths
    local_bundle_paths.each do |name,bundles_path|
      bundle_path = "#{bundles_path}/#{bundle_name}.tmbundle"
      if File.exist? bundle_path
        removed = true
        %x[osascript -e 'tell application "Finder" to move the POSIX file "#{bundle_path}" to trash']
      end
    end

    unless removed
      say "There is no bundle by that name in the system", :red
      exit
    else
      reload :verbose => true
    end
  end

  desc "update", "updates all installed bundles"
  def update
    local_bundle_paths.each do |name,bundles_path|
      
      if (File.exist?(bundles_path))
        Dir.new(bundles_path).each{|dir|
          path = File.join(bundles_path, dir)
          if (![".", ".."].include?(dir) && File.directory?(path))
            
            svn_path = File.join(path, ".svn")
            git_path = File.join(path, ".git")
            
            if File.exist?(git_path)
              puts "Updateing #{path}"
              %x[git --git-dir=#{e_sh git_path} --work-tree=#{e_sh path}pull]
            elsif File.exist?(svn_path)
              puts "Updateing #{path}"
              %x[svn up #{e_sh path}]
            end
            
          end
        }
      end
      
    end
  end

  desc "update", "updates all installed bundles"
  def update
    local_bundle_paths.each do |name,bundles_path|
      
      if (File.exist?(bundles_path))
        Dir.new(bundles_path).each{|dir|
          path = File.join(bundles_path, dir)
          if (![".", ".."].include?(dir) && File.directory?(path))
            
            svn_path = File.join(path, ".svn")
            git_path = File.join(path, ".git")
            
            if File.exist?(git_path)
              puts "Updateing #{path}"
              %x[git --git-dir=#{e_sh git_path} --work-tree=#{e_sh path}pull]
            elsif File.exist?(svn_path)
              puts "Updateing #{path}"
              %x[svn up #{e_sh path}]
            end
            
          end
        }
      end
      
    end
  end

  desc "reload", "Reloads TextMate Bundles"
  method_options :verbose => :boolean
  def reload(opts = {})
    puts "Reloading bundles..." if opts[:verbose]
    %x[osascript -e 'tell app "TextMate" to reload bundles']
    puts "Done." if opts[:verbose]
  end

  private
  REMOTE_LOCATIONS =
    { :'Macromates Trunk'  => {:scm => :svn, :url => 'http://svn.textmate.org/trunk/Bundles'},
      :'Macromates Review' => {:scm => :svn, :url => 'http://svn.textmate.org/trunk/Review/Bundles'},

      # :'Bunch of Git Bundles' => {:scm => :git, :url => 'git://NotImplemented'},

      :'GitHub' => {:scm => :github, :url => 'http://github.com/search?q=tmbundle'},
    }

  SHORT_LOCATIONS = {:trunk => :"Macromates Trunk", :review => :"Macromates Review", :github => :"GitHub"}

  def remote_bundle(name)
    name = name.to_sym
    REMOTE_LOCATIONS[name] || REMOTE_LOCATIONS[SHORT_LOCATIONS[name]]
  end

  def local_bundle_paths
    { :Application       => '/Applications/TextMate.app/Contents/SharedSupport/Bundles',
      :User              => "#{ENV["HOME"]}/Library/Application Support/TextMate/Bundles",
      :System            => '/Library/Application Support/TextMate/Bundles',
      :'User Pristine'   => "#{ENV["HOME"]}/Library/Application Support/TextMate/Pristine Copy/Bundles",
      :'System Pristine' => '/Library/Application Support/TextMate/Pristine Copy/Bundles',
    }
  end

  def install_bundles_path
    local_bundle_paths[:'User Pristine']
  end

  # Copied from http://macromates.com/svn/Bundles/trunk/Support/lib/escape.rb
  # escape text to make it useable in a shell script as one “word” (string)
  def e_sh(str)
  	str.to_s.gsub(/(?=[^a-zA-Z0-9_.\/\-\x7F-\xFF\n])/, '\\').gsub(/\n/, "'\n'").sub(/^$/, "''")
  end

  def url_escape(str)
    chars = ((33...47).to_a + (94...96).to_a + (123...126).to_a).map {|c| c.chr }.join + "\\[\\]\\\\"
    str = str.to_s.gsub(%r{[#{chars}]}) {|m| CGI.escape(m) }
  end

  CAPITALIZATION_EXCEPTIONS = %w[tmbundle on]
  # Convert a GitHub repo name into a "normal" TM bundle name
  # e.g. ruby-on-rails-tmbundle => Ruby on Rails.tmbundle
  def normalize_github_repo_name(name)
    name = name.gsub(/[\-\.]/, " ").split.each{|part| part.capitalize! unless CAPITALIZATION_EXCEPTIONS.include? part}.join(" ")
    name[-9] = ?. if name =~ / tmbundle$/
    name
  end

  # Does the opposite of normalize_github_repo_name
  def denormalize_github_repo_name(name)
    name = name.split(' ').each{|part| part.downcase!}.join(' ').gsub(' ', '-')
    name += ".tmbundle" unless name =~ /.tmbundle$/
    name
  end

  def find_github_bundles(search_term)
    # Until GitHub fixes http://support.github.com/discussions/feature-requests/11-api-search-results,
    # we need to account for multiple pages of results:
    page = 1
    repositories = YAML.load(open("http://github.com/api/v1/yaml/search/tmbundle?start_value=#{page}"))['repositories']
    results = []
    until repositories.empty?
      results += repositories.find_all{|result| result['name'].match(search_term)}
      page += 1
      repositories = YAML.load(open("http://github.com/api/v1/yaml/search/tmbundle?start_value=#{page}"))['repositories']
    end
    results.sort{|a,b| a['name'] <=> b['name']}
  end

  def git_clone(repo, name)
    bundle_name = normalize_github_repo_name(name)

    path = "#{install_bundles_path}/#{bundle_name}"
    escaped_path = "#{e_sh(install_bundles_path)}/#{e_sh(bundle_name)}"

    if File.directory?(path)
      say "Sorry, that bundle is already installed. Please uninstall it first.", :red
      exit
    end

    %[git clone "git://github.com/#{url_escape(repo)}/#{url_escape(name)}.git" #{escaped_path} 2>&1]
  end

end

# TODO: create a "monument to personal cleverness" by class-izing everything?
# class TextMateBundle
#   def self.find_local(bundle_name)
#
#   end
#
#   def self.find_remote(bundle_name)
#
#   end
#   attr_reader :name
#   attr_reader :location
#   attr_reader :scm
#   def initialize(name, location, scm)
#     @name     = name
#     @location = location
#     @scm      = scm
#   end
#
#   def install!
#
#   end
#
#   def uninstall!
#
#   end
#
#
#   def installed?
#     # List all the installed versions, and where they're at
#   end
#
#   # TODO: dirty? method to show if there are any deltas
# end

TextmateInstaller.start
